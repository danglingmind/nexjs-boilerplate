// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  Description   String?
  Themes        Theme[]
  Active        Boolean
  Tags          Tag[]
  EmbedLink     String?
  Testimonial   Testimonial? @relation(fields: [testimonialId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  testimonialId String?      @db.ObjectId
}

model Testimonial {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  Name              String?
  Description       String?
  Tags              Tag[]
  Theme             Theme           @relation(fields: [themeId], references: [id])
  isForm            Boolean
  Active            Boolean
  Boards            Board[]
  PermissionToShare Boolean?
  ImageUploaded     Boolean?
  VideoUploaded     Boolean?
  ImageLink         String?
  VideoLink         String?
  UserEmail         String
  SocialAccounts    SocialAccount[]
  Verified          Boolean?

  themeId String @db.ObjectId
}

model Theme {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  Board       Board?        @relation(fields: [boardId], references: [id])
  boardId     String?       @db.ObjectId
  Testimonial Testimonial[]
}

model Tag {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  Board         Board?       @relation(fields: [boardId], references: [id])
  boardId       String?      @db.ObjectId
  Testimonial   Testimonial? @relation(fields: [testimonialId], references: [id])
  testimonialId String?      @db.ObjectId
}

model SocialAccount {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  Plateform     String
  Url           String
  Testimonial   Testimonial? @relation(fields: [testimonialId], references: [id])
  testimonialId String?      @db.ObjectId
}
